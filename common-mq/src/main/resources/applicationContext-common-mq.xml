<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
  		http://www.springframework.org/schema/beans/spring-beans.xsd
  		http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
     	http://www.springframework.org/schema/tx/spring-tx.xsd
     	http://www.springframework.org/schema/jms 
     	http://www.springframework.org/schema/jms/spring-jms.xsd">

	<context:annotation-config />
	<context:component-scan base-package="org.rency.common.mq" />
	
	<!-- 异常监听 -->	
	<bean id="jmsExceptionListener" class="org.rency.common.mq.listener.JmsExceptionListener" />
	
	<bean id="jndiTemplate" class="org.springframework.jndi.JndiTemplate">
		<property name="environment">
			<props>
				<prop key="java.naming.factory.initial" value="${common.java.naming.factory.initial}" />
				<prop key="java.naming.provider.url" value="${common.java.naming.provider.url}" />
				<prop key="java.naming.security.principal" value="${common.java.naming.security.principal}" />
				<prop key="java.naming.security.credentials" value="${common.java.naming.security.credentials}" />
				<prop key="userName " value="${common.java.naming.security.principal}" />
				<prop key="password" value="${common.java.naming.security.credentials}" />
			</props>
		</property>
	</bean>
	
	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
	<bean id="jndiConnectionFactory" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiTemplate" ref="jndiTemplate"/>
		<property name="jndiName" value="ConnectionFactory" />
	</bean>
	
	<bean id="poolConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
		<property name="connectionFactory" ref="jndiConnectionFactory" />
		<property name="idleTimeout" value="0"/>
	</bean>
	
	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
		<property name="targetConnectionFactory" ref="poolConnectionFactory" />
	</bean>
	
	<!-- 目的地解析 -->
	<bean id="destinationResolver" class="org.springframework.jms.support.destination.JndiDestinationResolver">
		<!-- 设置目标JNDI配置 -->
		<property name="jndiTemplate" ref="jndiTemplate" />
		<!-- 动态创建的Queues和Topics会被缓存，当cache值为true的时候，jndi中配置的destination需要都是唯一的 -->
		<property name="cache" value="false" />
		<property name="fallbackToDynamicDestination" value="false" />
	</bean>
	
	<!-- 默认目的地 -->
	<bean id="defaultDestination" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiTemplate" value="jndiTemplate" />
		<property name="jndiName" value="RENCY.COMMON.TOPIC" />
	</bean>
	
	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
   		<constructor-arg ref="connectionFactory"/>
   		<property name="defaultDestination" ref="defaultDestination" />
   		<property name="pubSubDomain" value="false" /><!-- 订阅发布者模式 -->
	</bean>
	
	<!-- 消息监听容器 -->
	<bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destinationResolver" ref="destinationResolver" />
		<property name="destination" ref="defaultDestination" />
		<property name="sessionTransacted" value="true" /><!-- 事务管理 -->
		<property name="messageListener" ref="defaultMessageListener" />		
	</bean>
	
	<!-- 接收消息异步执行线程池 -->
	<bean id="mqFlushTreadPoolTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数，默认为1 -->
		<property name="corePoolSize" value="1" />
		<!-- 最大线程数，默认为Integer.MAX_VALUE -->
		<property name="maxPoolSize" value="5" />
		<!-- 队列最大长度，默认为Integer.MAX_VALUE -->
		<property name="queueCapacity" value="1000" />
		<!-- 线程池维护线程所允许的空闲时间，默认为60s -->
		<property name="keepAliveSeconds" value="300" />
		<!-- 线程池对拒绝任务（超过待处理队列长度）的处理策略 -->
		<property name="rejectedExecutionHandler">
			<!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
			<!-- CallerRunsPolicy:若已达到待处理队列长度，将由主线程直接处理请求 -->
			<!-- DiscardOldestPolicy:抛弃旧的任务；会导致被丢弃的任务无法再次被执行 -->
			<!-- DiscardPolicy:抛弃当前任务；会导致被丢弃的任务无法再次被执行 -->
			<bean class="java.util.concurrent.ThreadPoolExecutor$AbortPolicy" />
		</property>
	</bean>
	
	<bean id="mqService" class="org.rency.common.mq.service.impl.MQServiceImpl">
		<property name="jmsTemplate" ref="jmsTemplate" />
	</bean>
	
</beans>